int dataLen=20;

    //UnorderedArray Test

     UnorderedArray ua(f.getLength());
   cout<<"------------UNSORTED ARRAY-------------"<<endl;
     high_resolution_clock::time_point start = high_resolution_clock::now();
      for(int i=0;i<f.getLength();i++){
         ua.insertWord(data[i]);
      }
      high_resolution_clock::time_point end = high_resolution_clock::now();
      duration<double> time_span = duration_cast<duration<double>>(end-start);
      cout<<"Insertion Execution Time:";
      cout<<time_span.count()<<endl;

      start = high_resolution_clock::now();
      int pos;
      for(int i=0;i<1000;i++){
          ua.searchWord(set[i],pos);
      }
      end = high_resolution_clock::now();
      time_span = duration_cast<duration<double>>(end-start);
      cout<<"Search Execution Time:";
      cout<<time_span.count()<<endl;

     //OrderedArray Test


     OrderedArray oa(f.getLength());
        cout<<"------------ORDERED ARRAY-------------"<<endl;
        high_resolution_clock::time_point start = high_resolution_clock::now();
        for(int i=0;i<f.getLength();i++){
            oa.insertWord(data[i]);
        }
        high_resolution_clock::time_point end = high_resolution_clock::now();
        duration<double> time_span = duration_cast<duration<double>>(end-start);
        cout<<"Insertion Execution Time:";
        cout<<time_span.count()<<endl;

        start = high_resolution_clock::now();
        int pos;
        for(int i=0;i<1000;i++){
            oa.searchWord(set[i],pos);
        }
        end = high_resolution_clock::now();
        time_span = duration_cast<duration<double>>(end-start);
        cout<<"Search Execution Time:";
        cout<<time_span.count()<<endl;

    int t=0;
    string sorted_data[20] = {"Bible", "Bible","Capitalism","Clay", "Colony", "Commence","Dolphin","Dolphin","Governor","Governor","Infrastructure","Precedent","Purple","Rage","Rails","Rainbow","Slime","Tokyo","Tokyo","Wilderness"};
    OrderedArray b(sorted_data, dataLen);
    ///*cout<<b.findWord("Random",t)<<endl;
    cout<<t<<endl;
    cout<<b.findWord("Dolphin",t)<<endl;
    cout<<t<<endl;
    cout<<"test"<<endl;
    cout<<b.addWord("Eva")<<endl;
    cout<<b.findWord("Eva",t)<<endl;
    cout<<t<<endl<<b.getWord(t)<<endl;
    cout<<b.findWord("Eva",t)<<endl;
    cout<<b.deleteWord("Eva")<<endl;
   cout<<b.findWord("Eva",t);
   // */

  /*  AVLSearchTree tree("leg");
    tree.insertWord("sky");
    tree.insertWord("fox");
    tree.insertWord("cat");
    tree.insertWord("nit");
    tree.insertWord("ice");
    tree.insertWord("vat");
    tree.insertWord("mud");
    tree.inOrder(tree.getRoot());
    cout<<endl;
    cout<<tree.getHeight()<<endl;
    cout<<tree.getDifference();
*/

   HashTable ht(f.getLength());
    cout<<"------------HASH TABLE-------------"<<endl;
    high_resolution_clock::time_point start = high_resolution_clock::now();
    for(int i=0;i<f.getLength();i++){
        ht.insertWord(data[i]);
    }
    high_resolution_clock::time_point end = high_resolution_clock::now();
    duration<double> time_span = duration_cast<duration<double>>(end-start);
    cout<<"Insertion Execution Time:";
    cout<<time_span.count()<<endl;

    start = high_resolution_clock::now();
    int pos;
    for(int i=0;i<1000;i++){
        ht.searchWord(set[i]);
    }
    end = high_resolution_clock::now();
    time_span = duration_cast<duration<double>>(end-start);
    cout<<"Search Execution Time:";
    cout<<time_span.count()<<endl;

        BinarySearchTree bst(data[0]);
        cout<<"------------BINARY SEARCH TREE-------------"<<endl;
        high_resolution_clock::time_point start = high_resolution_clock::now();
        for(int i=1;i<f.getLength();i++){
            bst.insertWord(data[i]);
        }
        high_resolution_clock::time_point end = high_resolution_clock::now();
        duration<double> time_span = duration_cast<duration<double>>(end-start);
        cout<<"Insertion Execution Time:";
        cout<<time_span.count()<<endl;

        start = high_resolution_clock::now();
        int pos;
        for(int i=0;i<1000;i++){
            bst.searchWord(set[i]);
        }
        end = high_resolution_clock::now();
        time_span = duration_cast<duration<double>>(end-start);
        cout<<"Search Execution Time:";
        cout<<time_span.count()<<endl;

    }
