int dataLen=20;

    //UnorderedArray Test
     string data[20] = {"dolphin","colony","governor","clay","precedent","rage","governor","purple","tokyo","dolphin","rails","infrastructure","bible","tokyo","slime","capitalism","commence","bible","wilderness","rainbow"};
    UnorderedArray a(data,dataLen);
     a.addWord("blueple");
     ///*for(int i=0;i<a.getLength();i++){
         cout<<a.getWord(i)<<endl;
     }
     //*/

     //OrderedArray Test

    int t=0;
    string sorted_data[20] = {"Bible", "Bible","Capitalism","Clay", "Colony", "Commence","Dolphin","Dolphin","Governor","Governor","Infrastructure","Precedent","Purple","Rage","Rails","Rainbow","Slime","Tokyo","Tokyo","Wilderness"};
    OrderedArray b(sorted_data, dataLen);
    ///*cout<<b.findWord("Random",t)<<endl;
    cout<<t<<endl;
    cout<<b.findWord("Dolphin",t)<<endl;
    cout<<t<<endl;
    cout<<"test"<<endl;
    cout<<b.addWord("Eva")<<endl;
    cout<<b.findWord("Eva",t)<<endl;
    cout<<t<<endl<<b.getWord(t)<<endl;
    cout<<b.findWord("Eva",t)<<endl;
    cout<<b.deleteWord("Eva")<<endl;
   cout<<b.findWord("Eva",t);
   // */

  /*  AVLSearchTree tree("leg");
    tree.insertWord("sky");
    tree.insertWord("fox");
    tree.insertWord("cat");
    tree.insertWord("nit");
    tree.insertWord("ice");
    tree.insertWord("vat");
    tree.insertWord("mud");
    tree.inOrder(tree.getRoot());
    cout<<endl;
    cout<<tree.getHeight()<<endl;
    cout<<tree.getDifference();
*/
